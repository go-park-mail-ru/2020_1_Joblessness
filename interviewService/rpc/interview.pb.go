// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: interview.proto

package interviewRpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SendSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VacancyID      uint64               `protobuf:"varint,1,opt,name=VacancyID,proto3" json:"VacancyID,omitempty"`
	SummaryID      uint64               `protobuf:"varint,2,opt,name=SummaryID,proto3" json:"SummaryID,omitempty"`
	UserID         uint64               `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OrganizationID uint64               `protobuf:"varint,4,opt,name=OrganizationID,proto3" json:"OrganizationID,omitempty"`
	InterviewDate  *timestamp.Timestamp `protobuf:"bytes,5,opt,name=InterviewDate,proto3" json:"InterviewDate,omitempty"`
	Accepted       bool                 `protobuf:"varint,6,opt,name=Accepted,proto3" json:"Accepted,omitempty"`
	Denied         bool                 `protobuf:"varint,7,opt,name=Denied,proto3" json:"Denied,omitempty"`
}

func (x *SendSummary) Reset() {
	*x = SendSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interview_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSummary) ProtoMessage() {}

func (x *SendSummary) ProtoReflect() protoreflect.Message {
	mi := &file_interview_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSummary.ProtoReflect.Descriptor instead.
func (*SendSummary) Descriptor() ([]byte, []int) {
	return file_interview_proto_rawDescGZIP(), []int{0}
}

func (x *SendSummary) GetVacancyID() uint64 {
	if x != nil {
		return x.VacancyID
	}
	return 0
}

func (x *SendSummary) GetSummaryID() uint64 {
	if x != nil {
		return x.SummaryID
	}
	return 0
}

func (x *SendSummary) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *SendSummary) GetOrganizationID() uint64 {
	if x != nil {
		return x.OrganizationID
	}
	return 0
}

func (x *SendSummary) GetInterviewDate() *timestamp.Timestamp {
	if x != nil {
		return x.InterviewDate
	}
	return nil
}

func (x *SendSummary) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *SendSummary) GetDenied() bool {
	if x != nil {
		return x.Denied
	}
	return false
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   string               `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	UserOneId uint64               `protobuf:"varint,2,opt,name=UserOneId,proto3" json:"UserOneId,omitempty"`
	UserOne   string               `protobuf:"bytes,3,opt,name=UserOne,proto3" json:"UserOne,omitempty"`
	UserTwoId uint64               `protobuf:"varint,4,opt,name=UserTwoId,proto3" json:"UserTwoId,omitempty"`
	UserTwo   string               `protobuf:"bytes,5,opt,name=UserTwo,proto3" json:"UserTwo,omitempty"`
	Created   *timestamp.Timestamp `protobuf:"bytes,6,opt,name=Created,proto3" json:"Created,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interview_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_interview_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_interview_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Message) GetUserOneId() uint64 {
	if x != nil {
		return x.UserOneId
	}
	return 0
}

func (x *Message) GetUserOne() string {
	if x != nil {
		return x.UserOne
	}
	return ""
}

func (x *Message) GetUserTwoId() uint64 {
	if x != nil {
		return x.UserTwoId
	}
	return 0
}

func (x *Message) GetUserTwo() string {
	if x != nil {
		return x.UserTwo
	}
	return ""
}

func (x *Message) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type Messages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From []*Message `protobuf:"bytes,1,rep,name=From,proto3" json:"From,omitempty"`
	To   []*Message `protobuf:"bytes,2,rep,name=To,proto3" json:"To,omitempty"`
}

func (x *Messages) Reset() {
	*x = Messages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interview_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Messages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Messages) ProtoMessage() {}

func (x *Messages) ProtoReflect() protoreflect.Message {
	mi := &file_interview_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Messages.ProtoReflect.Descriptor instead.
func (*Messages) Descriptor() ([]byte, []int) {
	return file_interview_proto_rawDescGZIP(), []int{2}
}

func (x *Messages) GetFrom() []*Message {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Messages) GetTo() []*Message {
	if x != nil {
		return x.To
	}
	return nil
}

type ChatParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From uint64 `protobuf:"varint,1,opt,name=From,proto3" json:"From,omitempty"`
	To   uint64 `protobuf:"varint,2,opt,name=To,proto3" json:"To,omitempty"`
	Page uint64 `protobuf:"varint,3,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (x *ChatParameters) Reset() {
	*x = ChatParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interview_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatParameters) ProtoMessage() {}

func (x *ChatParameters) ProtoReflect() protoreflect.Message {
	mi := &file_interview_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatParameters.ProtoReflect.Descriptor instead.
func (*ChatParameters) Descriptor() ([]byte, []int) {
	return file_interview_proto_rawDescGZIP(), []int{3}
}

func (x *ChatParameters) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *ChatParameters) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *ChatParameters) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type IsParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VacancyID uint64 `protobuf:"varint,1,opt,name=vacancyID,proto3" json:"vacancyID,omitempty"`
	UserID    uint64 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *IsParameters) Reset() {
	*x = IsParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interview_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsParameters) ProtoMessage() {}

func (x *IsParameters) ProtoReflect() protoreflect.Message {
	mi := &file_interview_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsParameters.ProtoReflect.Descriptor instead.
func (*IsParameters) Descriptor() ([]byte, []int) {
	return file_interview_proto_rawDescGZIP(), []int{4}
}

func (x *IsParameters) GetVacancyID() uint64 {
	if x != nil {
		return x.VacancyID
	}
	return 0
}

func (x *IsParameters) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type SummaryCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID           uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OrganizationID   uint64 `protobuf:"varint,2,opt,name=OrganizationID,proto3" json:"OrganizationID,omitempty"`
	UserName         string `protobuf:"bytes,3,opt,name=UserName,proto3" json:"UserName,omitempty"`
	OrganizationName string `protobuf:"bytes,4,opt,name=OrganizationName,proto3" json:"OrganizationName,omitempty"`
}

func (x *SummaryCredentials) Reset() {
	*x = SummaryCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interview_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryCredentials) ProtoMessage() {}

func (x *SummaryCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_interview_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryCredentials.ProtoReflect.Descriptor instead.
func (*SummaryCredentials) Descriptor() ([]byte, []int) {
	return file_interview_proto_rawDescGZIP(), []int{5}
}

func (x *SummaryCredentials) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *SummaryCredentials) GetOrganizationID() uint64 {
	if x != nil {
		return x.OrganizationID
	}
	return 0
}

func (x *SummaryCredentials) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SummaryCredentials) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

type CredentialsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SummaryID uint64 `protobuf:"varint,1,opt,name=SummaryID,proto3" json:"SummaryID,omitempty"`
	VacancyID uint64 `protobuf:"varint,2,opt,name=VacancyID,proto3" json:"VacancyID,omitempty"`
	UserID    uint64 `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CredentialsParams) Reset() {
	*x = CredentialsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interview_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialsParams) ProtoMessage() {}

func (x *CredentialsParams) ProtoReflect() protoreflect.Message {
	mi := &file_interview_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialsParams.ProtoReflect.Descriptor instead.
func (*CredentialsParams) Descriptor() ([]byte, []int) {
	return file_interview_proto_rawDescGZIP(), []int{6}
}

func (x *CredentialsParams) GetSummaryID() uint64 {
	if x != nil {
		return x.SummaryID
	}
	return 0
}

func (x *CredentialsParams) GetVacancyID() uint64 {
	if x != nil {
		return x.VacancyID
	}
	return 0
}

func (x *CredentialsParams) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type ConversationTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatterId     uint64               `protobuf:"varint,1,opt,name=ChatterId,proto3" json:"ChatterId,omitempty"`
	ChatterName   string               `protobuf:"bytes,2,opt,name=Tag,proto3" json:"Tag,omitempty"`
	InterviewDate *timestamp.Timestamp `protobuf:"bytes,3,opt,name=InterviewDate,proto3" json:"InterviewDate,omitempty"`
}

func (x *ConversationTitle) Reset() {
	*x = ConversationTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interview_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationTitle) ProtoMessage() {}

func (x *ConversationTitle) ProtoReflect() protoreflect.Message {
	mi := &file_interview_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationTitle.ProtoReflect.Descriptor instead.
func (*ConversationTitle) Descriptor() ([]byte, []int) {
	return file_interview_proto_rawDescGZIP(), []int{7}
}

func (x *ConversationTitle) GetChatterId() uint64 {
	if x != nil {
		return x.ChatterId
	}
	return 0
}

func (x *ConversationTitle) GetChatterName() string {
	if x != nil {
		return x.ChatterName
	}
	return ""
}

func (x *ConversationTitle) GetInterviewDate() *timestamp.Timestamp {
	if x != nil {
		return x.InterviewDate
	}
	return nil
}

type Conversations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title []*ConversationTitle `protobuf:"bytes,1,rep,name=Title,proto3" json:"Title,omitempty"`
}

func (x *Conversations) Reset() {
	*x = Conversations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interview_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversations) ProtoMessage() {}

func (x *Conversations) ProtoReflect() protoreflect.Message {
	mi := &file_interview_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversations.ProtoReflect.Descriptor instead.
func (*Conversations) Descriptor() ([]byte, []int) {
	return file_interview_proto_rawDescGZIP(), []int{8}
}

func (x *Conversations) GetTitle() []*ConversationTitle {
	if x != nil {
		return x.Title
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64 `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interview_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_interview_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_interview_proto_rawDescGZIP(), []int{9}
}

func (x *Status) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

var File_interview_proto protoreflect.FileDescriptor

var file_interview_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x56, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x40, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x54, 0x77, 0x6f,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x12, 0x34, 0x0a, 0x07,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x22, 0x64, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x29, 0x0a,
	0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x48, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x50, 0x61,
	0x67, 0x65, 0x22, 0x44, 0x0a, 0x0c, 0x49, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x76, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x9c, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61,
	0x63, 0x61, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x56,
	0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x95, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x68, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x22, 0x4a, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0x1c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x32, 0x85, 0x04, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x53, 0x0a, 0x15, 0x49, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x18, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x18, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x3b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_interview_proto_rawDescOnce sync.Once
	file_interview_proto_rawDescData = file_interview_proto_rawDesc
)

func file_interview_proto_rawDescGZIP() []byte {
	file_interview_proto_rawDescOnce.Do(func() {
		file_interview_proto_rawDescData = protoimpl.X.CompressGZIP(file_interview_proto_rawDescData)
	})
	return file_interview_proto_rawDescData
}

var file_interview_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_interview_proto_goTypes = []interface{}{
	(*SendSummary)(nil),         // 0: interviewService.SendSummary
	(*Message)(nil),             // 1: interviewService.Message
	(*Messages)(nil),            // 2: interviewService.Messages
	(*ChatParameters)(nil),      // 3: interviewService.ChatParameters
	(*IsParameters)(nil),        // 4: interviewService.IsParameters
	(*SummaryCredentials)(nil),  // 5: interviewService.SummaryCredentials
	(*CredentialsParams)(nil),   // 6: interviewService.CredentialsParams
	(*ConversationTitle)(nil),   // 7: interviewService.ConversationTitle
	(*Conversations)(nil),       // 8: interviewService.Conversations
	(*Status)(nil),              // 9: interviewService.Status
	(*timestamp.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_interview_proto_depIdxs = []int32{
	10, // 0: interviewService.SendSummary.InterviewDate:type_name -> google.protobuf.Timestamp
	10, // 1: interviewService.Message.Created:type_name -> google.protobuf.Timestamp
	1,  // 2: interviewService.Messages.From:type_name -> interviewService.Message
	1,  // 3: interviewService.Messages.To:type_name -> interviewService.Message
	10, // 4: interviewService.ConversationTitle.InterviewDate:type_name -> google.protobuf.Timestamp
	7,  // 5: interviewService.Conversations.Title:type_name -> interviewService.ConversationTitle
	4,  // 6: interviewService.Interview.IsOrganizationVacancy:input_type -> interviewService.IsParameters
	0,  // 7: interviewService.Interview.ResponseSummary:input_type -> interviewService.SendSummary
	1,  // 8: interviewService.Interview.SaveMessage:input_type -> interviewService.Message
	3,  // 9: interviewService.Interview.GetHistory:input_type -> interviewService.ChatParameters
	6,  // 10: interviewService.Interview.GetResponseCredentials:input_type -> interviewService.CredentialsParams
	6,  // 11: interviewService.Interview.GetConversations:input_type -> interviewService.CredentialsParams
	9,  // 12: interviewService.Interview.IsOrganizationVacancy:output_type -> interviewService.Status
	9,  // 13: interviewService.Interview.ResponseSummary:output_type -> interviewService.Status
	9,  // 14: interviewService.Interview.SaveMessage:output_type -> interviewService.Status
	2,  // 15: interviewService.Interview.GetHistory:output_type -> interviewService.Messages
	5,  // 16: interviewService.Interview.GetResponseCredentials:output_type -> interviewService.SummaryCredentials
	8,  // 17: interviewService.Interview.GetConversations:output_type -> interviewService.Conversations
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_interview_proto_init() }
func file_interview_proto_init() {
	if File_interview_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interview_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interview_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interview_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Messages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interview_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interview_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interview_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interview_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interview_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interview_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interview_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interview_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interview_proto_goTypes,
		DependencyIndexes: file_interview_proto_depIdxs,
		MessageInfos:      file_interview_proto_msgTypes,
	}.Build()
	File_interview_proto = out.File
	file_interview_proto_rawDesc = nil
	file_interview_proto_goTypes = nil
	file_interview_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InterviewClient is the client API for Interview service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InterviewClient interface {
	IsOrganizationVacancy(ctx context.Context, in *IsParameters, opts ...grpc.CallOption) (*Status, error)
	ResponseSummary(ctx context.Context, in *SendSummary, opts ...grpc.CallOption) (*Status, error)
	SaveMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Status, error)
	GetHistory(ctx context.Context, in *ChatParameters, opts ...grpc.CallOption) (*Messages, error)
	GetResponseCredentials(ctx context.Context, in *CredentialsParams, opts ...grpc.CallOption) (*SummaryCredentials, error)
	GetConversations(ctx context.Context, in *CredentialsParams, opts ...grpc.CallOption) (*Conversations, error)
}

type interviewClient struct {
	cc grpc.ClientConnInterface
}

func NewInterviewClient(cc grpc.ClientConnInterface) InterviewClient {
	return &interviewClient{cc}
}

func (c *interviewClient) IsOrganizationVacancy(ctx context.Context, in *IsParameters, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/interviewService.Interview/IsOrganizationVacancy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewClient) ResponseSummary(ctx context.Context, in *SendSummary, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/interviewService.Interview/ResponseSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewClient) SaveMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/interviewService.Interview/SaveMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewClient) GetHistory(ctx context.Context, in *ChatParameters, opts ...grpc.CallOption) (*Messages, error) {
	out := new(Messages)
	err := c.cc.Invoke(ctx, "/interviewService.Interview/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewClient) GetResponseCredentials(ctx context.Context, in *CredentialsParams, opts ...grpc.CallOption) (*SummaryCredentials, error) {
	out := new(SummaryCredentials)
	err := c.cc.Invoke(ctx, "/interviewService.Interview/GetResponseCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewClient) GetConversations(ctx context.Context, in *CredentialsParams, opts ...grpc.CallOption) (*Conversations, error) {
	out := new(Conversations)
	err := c.cc.Invoke(ctx, "/interviewService.Interview/GetConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterviewServer is the server API for Interview service.
type InterviewServer interface {
	IsOrganizationVacancy(context.Context, *IsParameters) (*Status, error)
	ResponseSummary(context.Context, *SendSummary) (*Status, error)
	SaveMessage(context.Context, *Message) (*Status, error)
	GetHistory(context.Context, *ChatParameters) (*Messages, error)
	GetResponseCredentials(context.Context, *CredentialsParams) (*SummaryCredentials, error)
	GetConversations(context.Context, *CredentialsParams) (*Conversations, error)
}

// UnimplementedInterviewServer can be embedded to have forward compatible implementations.
type UnimplementedInterviewServer struct {
}

func (*UnimplementedInterviewServer) IsOrganizationVacancy(context.Context, *IsParameters) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOrganizationVacancy not implemented")
}
func (*UnimplementedInterviewServer) ResponseSummary(context.Context, *SendSummary) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResponseSummary not implemented")
}
func (*UnimplementedInterviewServer) SaveMessage(context.Context, *Message) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMessage not implemented")
}
func (*UnimplementedInterviewServer) GetHistory(context.Context, *ChatParameters) (*Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (*UnimplementedInterviewServer) GetResponseCredentials(context.Context, *CredentialsParams) (*SummaryCredentials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResponseCredentials not implemented")
}
func (*UnimplementedInterviewServer) GetConversations(context.Context, *CredentialsParams) (*Conversations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversations not implemented")
}

func RegisterInterviewServer(s *grpc.Server, srv InterviewServer) {
	s.RegisterService(&_Interview_serviceDesc, srv)
}

func _Interview_IsOrganizationVacancy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServer).IsOrganizationVacancy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interviewService.Interview/IsOrganizationVacancy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServer).IsOrganizationVacancy(ctx, req.(*IsParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interview_ResponseSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSummary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServer).ResponseSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interviewService.Interview/ResponseSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServer).ResponseSummary(ctx, req.(*SendSummary))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interview_SaveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServer).SaveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interviewService.Interview/SaveMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServer).SaveMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interview_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interviewService.Interview/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServer).GetHistory(ctx, req.(*ChatParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interview_GetResponseCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServer).GetResponseCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interviewService.Interview/GetResponseCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServer).GetResponseCredentials(ctx, req.(*CredentialsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interview_GetConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServer).GetConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interviewService.Interview/GetConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServer).GetConversations(ctx, req.(*CredentialsParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Interview_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interviewService.Interview",
	HandlerType: (*InterviewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsOrganizationVacancy",
			Handler:    _Interview_IsOrganizationVacancy_Handler,
		},
		{
			MethodName: "ResponseSummary",
			Handler:    _Interview_ResponseSummary_Handler,
		},
		{
			MethodName: "SaveMessage",
			Handler:    _Interview_SaveMessage_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _Interview_GetHistory_Handler,
		},
		{
			MethodName: "GetResponseCredentials",
			Handler:    _Interview_GetResponseCredentials_Handler,
		},
		{
			MethodName: "GetConversations",
			Handler:    _Interview_GetConversations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interview.proto",
}
