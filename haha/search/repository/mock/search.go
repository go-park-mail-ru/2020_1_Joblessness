// Code generated by MockGen. DO NOT EDIT.
// Source: joblessness/haha/search/interfaces (interfaces: SearchRepository)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	baseModels "joblessness/haha/models/base"
	reflect "reflect"
)

// MockSearchRepository is a mock of SearchRepository interface
type MockSearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSearchRepositoryMockRecorder
}

// MockSearchRepositoryMockRecorder is the mock recorder for MockSearchRepository
type MockSearchRepositoryMockRecorder struct {
	mock *MockSearchRepository
}

// NewMockSearchRepository creates a new mock instance
func NewMockSearchRepository(ctrl *gomock.Controller) *MockSearchRepository {
	mock := &MockSearchRepository{ctrl: ctrl}
	mock.recorder = &MockSearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchRepository) EXPECT() *MockSearchRepositoryMockRecorder {
	return m.recorder
}

// SearchOrganizations mocks base method
func (m *MockSearchRepository) SearchOrganizations(arg0 *baseModels.SearchParams) ([]*baseModels.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOrganizations", arg0)
	ret0, _ := ret[0].([]*baseModels.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOrganizations indicates an expected call of SearchOrganizations
func (mr *MockSearchRepositoryMockRecorder) SearchOrganizations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrganizations", reflect.TypeOf((*MockSearchRepository)(nil).SearchOrganizations), arg0)
}

// SearchPersons mocks base method
func (m *MockSearchRepository) SearchPersons(arg0 *baseModels.SearchParams) ([]*baseModels.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPersons", arg0)
	ret0, _ := ret[0].([]*baseModels.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPersons indicates an expected call of SearchPersons
func (mr *MockSearchRepositoryMockRecorder) SearchPersons(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPersons", reflect.TypeOf((*MockSearchRepository)(nil).SearchPersons), arg0)
}

// SearchVacancies mocks base method
func (m *MockSearchRepository) SearchVacancies(arg0 *baseModels.SearchParams) ([]*baseModels.Vacancy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVacancies", arg0)
	ret0, _ := ret[0].([]*baseModels.Vacancy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVacancies indicates an expected call of SearchVacancies
func (mr *MockSearchRepositoryMockRecorder) SearchVacancies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVacancies", reflect.TypeOf((*MockSearchRepository)(nil).SearchVacancies), arg0)
}
