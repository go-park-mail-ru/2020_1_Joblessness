// Code generated by MockGen. DO NOT EDIT.
// Source: joblessness/haha/search/interfaces (interfaces: SearchUseCase)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "joblessness/haha/models"
	reflect "reflect"
)

// MockSearchUseCase is a mock of SearchUseCase interface
type MockSearchUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSearchUseCaseMockRecorder
}

// MockSearchUseCaseMockRecorder is the mock recorder for MockSearchUseCase
type MockSearchUseCaseMockRecorder struct {
	mock *MockSearchUseCase
}

// NewMockSearchUseCase creates a new mock instance
func NewMockSearchUseCase(ctrl *gomock.Controller) *MockSearchUseCase {
	mock := &MockSearchUseCase{ctrl: ctrl}
	mock.recorder = &MockSearchUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchUseCase) EXPECT() *MockSearchUseCaseMockRecorder {
	return m.recorder
}

// Search mocks base method
func (m *MockSearchUseCase) Search(arg0, arg1, arg2, arg3 string) (models.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(models.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockSearchUseCaseMockRecorder) Search(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchUseCase)(nil).Search), arg0, arg1, arg2, arg3)
}
