// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package baseModels

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC803d3e7EncodeJoblessnessHahaModelsBase(out *jwriter.Writer, in ResponseID) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeJoblessnessHahaModelsBase(w, v)
}

func easyjsonC803d3e7EncodeJoblessnessHahaModelsBase1(out *jwriter.Writer, in ResponseBool) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Like {
		const prefix string = ",\"like\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Like))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseBool) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeJoblessnessHahaModelsBase1(w, v)
}
