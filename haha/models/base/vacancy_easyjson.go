// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package baseModels

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson80a4d695DecodeJoblessnessHahaModelsBase(in *jlexer.Lexer, out *VacancyOrganization) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "tag":
			out.Tag = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "site":
			out.Site = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeJoblessnessHahaModelsBase(out *jwriter.Writer, in VacancyOrganization) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	if in.Tag != "" {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tag))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Phone != "" {
		const prefix string = ",\"phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Phone))
	}
	if in.Avatar != "" {
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Avatar))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Site != "" {
		const prefix string = ",\"site\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Site))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VacancyOrganization) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeJoblessnessHahaModelsBase(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VacancyOrganization) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeJoblessnessHahaModelsBase(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VacancyOrganization) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeJoblessnessHahaModelsBase(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VacancyOrganization) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeJoblessnessHahaModelsBase(l, v)
}
func easyjson80a4d695DecodeJoblessnessHahaModelsBase1(in *jlexer.Lexer, out *Vacancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "organization":
			(out.Organization).UnmarshalEasyJSON(in)
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "salaryFrom":
			out.SalaryFrom = int(in.Int())
		case "salaryTo":
			out.SalaryTo = int(in.Int())
		case "withTax":
			out.WithTax = bool(in.Bool())
		case "responsibilities":
			out.Responsibilities = string(in.String())
		case "conditions":
			out.Conditions = string(in.String())
		case "keywords":
			out.Keywords = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeJoblessnessHahaModelsBase1(out *jwriter.Writer, in Vacancy) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	if true {
		const prefix string = ",\"organization\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Organization).MarshalEasyJSON(out)
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.SalaryFrom != 0 {
		const prefix string = ",\"salaryFrom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SalaryFrom))
	}
	if in.SalaryTo != 0 {
		const prefix string = ",\"salaryTo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SalaryTo))
	}
	{
		const prefix string = ",\"withTax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.WithTax))
	}
	if in.Responsibilities != "" {
		const prefix string = ",\"responsibilities\":"
		out.RawString(prefix)
		out.String(string(in.Responsibilities))
	}
	if in.Conditions != "" {
		const prefix string = ",\"conditions\":"
		out.RawString(prefix)
		out.String(string(in.Conditions))
	}
	if in.Keywords != "" {
		const prefix string = ",\"keywords\":"
		out.RawString(prefix)
		out.String(string(in.Keywords))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Vacancy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeJoblessnessHahaModelsBase1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vacancy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeJoblessnessHahaModelsBase1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vacancy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeJoblessnessHahaModelsBase1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vacancy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeJoblessnessHahaModelsBase1(l, v)
}
