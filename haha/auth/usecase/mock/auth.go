// Code generated by MockGen. DO NOT EDIT.
// Source: joblessness/haha/auth/interfaces (interfaces: AuthUseCase)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	"joblessness/haha/models/base"
	reflect "reflect"
)

// MockAuthUseCase is a mock of AuthUseCase interface
type MockAuthUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUseCaseMockRecorder
}

// MockAuthUseCaseMockRecorder is the mock recorder for MockAuthUseCase
type MockAuthUseCaseMockRecorder struct {
	mock *MockAuthUseCase
}

// NewMockAuthUseCase creates a new mock instance
func NewMockAuthUseCase(ctrl *gomock.Controller) *MockAuthUseCase {
	mock := &MockAuthUseCase{ctrl: ctrl}
	mock.recorder = &MockAuthUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthUseCase) EXPECT() *MockAuthUseCaseMockRecorder {
	return m.recorder
}

// GetRole mocks base method
func (m *MockAuthUseCase) GetRole(arg0 uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole
func (mr *MockAuthUseCaseMockRecorder) GetRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockAuthUseCase)(nil).GetRole), arg0)
}

// Login mocks base method
func (m *MockAuthUseCase) Login(arg0, arg1 string) (uint64, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Login indicates an expected call of Login
func (mr *MockAuthUseCaseMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthUseCase)(nil).Login), arg0, arg1)
}

// Logout mocks base method
func (m *MockAuthUseCase) Logout(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockAuthUseCaseMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthUseCase)(nil).Logout), arg0)
}

// OrganizationSession mocks base method
func (m *MockAuthUseCase) OrganizationSession(arg0 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationSession", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationSession indicates an expected call of OrganizationSession
func (mr *MockAuthUseCaseMockRecorder) OrganizationSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationSession", reflect.TypeOf((*MockAuthUseCase)(nil).OrganizationSession), arg0)
}

// PersonSession mocks base method
func (m *MockAuthUseCase) PersonSession(arg0 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersonSession", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonSession indicates an expected call of PersonSession
func (mr *MockAuthUseCaseMockRecorder) PersonSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonSession", reflect.TypeOf((*MockAuthUseCase)(nil).PersonSession), arg0)
}

// RegisterOrganization mocks base method
func (m *MockAuthUseCase) RegisterOrganization(arg0 *baseModels.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOrganization", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterOrganization indicates an expected call of RegisterOrganization
func (mr *MockAuthUseCaseMockRecorder) RegisterOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOrganization", reflect.TypeOf((*MockAuthUseCase)(nil).RegisterOrganization), arg0)
}

// RegisterPerson mocks base method
func (m *MockAuthUseCase) RegisterPerson(arg0 *baseModels.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPerson", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterPerson indicates an expected call of RegisterPerson
func (mr *MockAuthUseCaseMockRecorder) RegisterPerson(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPerson", reflect.TypeOf((*MockAuthUseCase)(nil).RegisterPerson), arg0)
}

// SessionExists mocks base method
func (m *MockAuthUseCase) SessionExists(arg0 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionExists", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionExists indicates an expected call of SessionExists
func (mr *MockAuthUseCaseMockRecorder) SessionExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionExists", reflect.TypeOf((*MockAuthUseCase)(nil).SessionExists), arg0)
}
