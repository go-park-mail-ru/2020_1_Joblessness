// Code generated by MockGen. DO NOT EDIT.
// Source: joblessness/haha/utils/chat (interfaces: Room)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	chat "joblessness/haha/utils/chat"
	reflect "reflect"
)

// MockRoom is a mock of Room interface
type MockRoom struct {
	ctrl     *gomock.Controller
	recorder *MockRoomMockRecorder
}

// MockRoomMockRecorder is the mock recorder for MockRoom
type MockRoomMockRecorder struct {
	mock *MockRoom
}

// NewMockRoom creates a new mock instance
func NewMockRoom(ctrl *gomock.Controller) *MockRoom {
	mock := &MockRoom{ctrl: ctrl}
	mock.recorder = &MockRoomMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoom) EXPECT() *MockRoomMockRecorder {
	return m.recorder
}

// Forward mocks base method
func (m *MockRoom) Forward(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Forward", arg0)
}

// Forward indicates an expected call of Forward
func (mr *MockRoomMockRecorder) Forward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forward", reflect.TypeOf((*MockRoom)(nil).Forward), arg0)
}

// HandleMessage mocks base method
func (m *MockRoom) HandleMessage(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleMessage", arg0)
}

// HandleMessage indicates an expected call of HandleMessage
func (mr *MockRoomMockRecorder) HandleMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockRoom)(nil).HandleMessage), arg0)
}

// Join mocks base method
func (m *MockRoom) Join(arg0 *chat.Chatter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Join", arg0)
}

// Join indicates an expected call of Join
func (mr *MockRoomMockRecorder) Join(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockRoom)(nil).Join), arg0)
}

// Leave mocks base method
func (m *MockRoom) Leave(arg0 *chat.Chatter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Leave", arg0)
}

// Leave indicates an expected call of Leave
func (mr *MockRoomMockRecorder) Leave(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockRoom)(nil).Leave), arg0)
}

// Run mocks base method
func (m *MockRoom) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run
func (mr *MockRoomMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRoom)(nil).Run))
}

// SendGeneratedMessage mocks base method
func (m *MockRoom) SendGeneratedMessage(arg0 *chat.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendGeneratedMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendGeneratedMessage indicates an expected call of SendGeneratedMessage
func (mr *MockRoomMockRecorder) SendGeneratedMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGeneratedMessage", reflect.TypeOf((*MockRoom)(nil).SendGeneratedMessage), arg0)
}
