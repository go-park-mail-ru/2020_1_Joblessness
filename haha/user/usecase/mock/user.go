// Code generated by MockGen. DO NOT EDIT.
// Source: joblessness/haha/user/interfaces (interfaces: UserUseCase)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "joblessness/haha/models"
	multipart "mime/multipart"
	reflect "reflect"
)

// MockUserUseCase is a mock of UserUseCase interface
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// ChangeOrganization mocks base method
func (m *MockUserUseCase) ChangeOrganization(arg0 *models.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOrganization", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeOrganization indicates an expected call of ChangeOrganization
func (mr *MockUserUseCaseMockRecorder) ChangeOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrganization", reflect.TypeOf((*MockUserUseCase)(nil).ChangeOrganization), arg0)
}

// ChangePerson mocks base method
func (m *MockUserUseCase) ChangePerson(arg0 *models.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePerson", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePerson indicates an expected call of ChangePerson
func (mr *MockUserUseCaseMockRecorder) ChangePerson(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePerson", reflect.TypeOf((*MockUserUseCase)(nil).ChangePerson), arg0)
}

// GetListOfOrgs mocks base method
func (m *MockUserUseCase) GetListOfOrgs(arg0 int) (models.Organizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOfOrgs", arg0)
	ret0, _ := ret[0].(models.Organizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListOfOrgs indicates an expected call of GetListOfOrgs
func (mr *MockUserUseCaseMockRecorder) GetListOfOrgs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOfOrgs", reflect.TypeOf((*MockUserUseCase)(nil).GetListOfOrgs), arg0)
}

// GetOrganization mocks base method
func (m *MockUserUseCase) GetOrganization(arg0 uint64) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", arg0)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization
func (mr *MockUserUseCaseMockRecorder) GetOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockUserUseCase)(nil).GetOrganization), arg0)
}

// GetPerson mocks base method
func (m *MockUserUseCase) GetPerson(arg0 uint64) (*models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerson", arg0)
	ret0, _ := ret[0].(*models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPerson indicates an expected call of GetPerson
func (mr *MockUserUseCaseMockRecorder) GetPerson(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerson", reflect.TypeOf((*MockUserUseCase)(nil).GetPerson), arg0)
}

// GetUserFavorite mocks base method
func (m *MockUserUseCase) GetUserFavorite(arg0 uint64) (models.Favorites, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFavorite", arg0)
	ret0, _ := ret[0].(models.Favorites)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFavorite indicates an expected call of GetUserFavorite
func (mr *MockUserUseCaseMockRecorder) GetUserFavorite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFavorite", reflect.TypeOf((*MockUserUseCase)(nil).GetUserFavorite), arg0)
}

// LikeExists mocks base method
func (m *MockUserUseCase) LikeExists(arg0, arg1 uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikeExists indicates an expected call of LikeExists
func (mr *MockUserUseCaseMockRecorder) LikeExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeExists", reflect.TypeOf((*MockUserUseCase)(nil).LikeExists), arg0, arg1)
}

// LikeUser mocks base method
func (m *MockUserUseCase) LikeUser(arg0, arg1 uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeUser", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikeUser indicates an expected call of LikeUser
func (mr *MockUserUseCaseMockRecorder) LikeUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeUser", reflect.TypeOf((*MockUserUseCase)(nil).LikeUser), arg0, arg1)
}

// SetAvatar mocks base method
func (m *MockUserUseCase) SetAvatar(arg0 *multipart.Form, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAvatar", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAvatar indicates an expected call of SetAvatar
func (mr *MockUserUseCaseMockRecorder) SetAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAvatar", reflect.TypeOf((*MockUserUseCase)(nil).SetAvatar), arg0, arg1)
}
