// Code generated by MockGen. DO NOT EDIT.
// Source: joblessness/haha/interview/interfaces (interfaces: InterviewUseCase)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	baseModels "joblessness/haha/models/base"
	chat "joblessness/haha/utils/chat"
	reflect "reflect"
)

// MockInterviewUseCase is a mock of InterviewUseCase interface
type MockInterviewUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockInterviewUseCaseMockRecorder
}

// MockInterviewUseCaseMockRecorder is the mock recorder for MockInterviewUseCase
type MockInterviewUseCaseMockRecorder struct {
	mock *MockInterviewUseCase
}

// NewMockInterviewUseCase creates a new mock instance
func NewMockInterviewUseCase(ctrl *gomock.Controller) *MockInterviewUseCase {
	mock := &MockInterviewUseCase{ctrl: ctrl}
	mock.recorder = &MockInterviewUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterviewUseCase) EXPECT() *MockInterviewUseCaseMockRecorder {
	return m.recorder
}

// GetConversations mocks base method
func (m *MockInterviewUseCase) GetConversations(arg0 uint64) (baseModels.Conversations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversations", arg0)
	ret0, _ := ret[0].(baseModels.Conversations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversations indicates an expected call of GetConversations
func (mr *MockInterviewUseCaseMockRecorder) GetConversations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversations", reflect.TypeOf((*MockInterviewUseCase)(nil).GetConversations), arg0)
}

// GetHistory mocks base method
func (m *MockInterviewUseCase) GetHistory(arg0 *baseModels.ChatParameters) (baseModels.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", arg0)
	ret0, _ := ret[0].(baseModels.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory
func (mr *MockInterviewUseCaseMockRecorder) GetHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockInterviewUseCase)(nil).GetHistory), arg0)
}

// GetResponseCredentials mocks base method
func (m *MockInterviewUseCase) GetResponseCredentials(arg0, arg1 uint64) (*baseModels.SummaryCredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseCredentials", arg0, arg1)
	ret0, _ := ret[0].(*baseModels.SummaryCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponseCredentials indicates an expected call of GetResponseCredentials
func (mr *MockInterviewUseCaseMockRecorder) GetResponseCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseCredentials", reflect.TypeOf((*MockInterviewUseCase)(nil).GetResponseCredentials), arg0, arg1)
}

// ResponseSummary mocks base method
func (m *MockInterviewUseCase) ResponseSummary(arg0 *baseModels.SendSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseSummary", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResponseSummary indicates an expected call of ResponseSummary
func (mr *MockInterviewUseCaseMockRecorder) ResponseSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseSummary", reflect.TypeOf((*MockInterviewUseCase)(nil).ResponseSummary), arg0)
}

// SaveMessage mocks base method
func (m *MockInterviewUseCase) SaveMessage(arg0 *chat.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMessage indicates an expected call of SaveMessage
func (mr *MockInterviewUseCaseMockRecorder) SaveMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockInterviewUseCase)(nil).SaveMessage), arg0)
}
