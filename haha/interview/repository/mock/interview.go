// Code generated by MockGen. DO NOT EDIT.
// Source: joblessness/haha/interview/interfaces (interfaces: InterviewRepository)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	baseModels "joblessness/haha/models/base"
	chat "joblessness/haha/utils/chat"
	reflect "reflect"
)

// MockInterviewRepository is a mock of InterviewRepository interface
type MockInterviewRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInterviewRepositoryMockRecorder
}

// MockInterviewRepositoryMockRecorder is the mock recorder for MockInterviewRepository
type MockInterviewRepositoryMockRecorder struct {
	mock *MockInterviewRepository
}

// NewMockInterviewRepository creates a new mock instance
func NewMockInterviewRepository(ctrl *gomock.Controller) *MockInterviewRepository {
	mock := &MockInterviewRepository{ctrl: ctrl}
	mock.recorder = &MockInterviewRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterviewRepository) EXPECT() *MockInterviewRepositoryMockRecorder {
	return m.recorder
}

// GetConversations mocks base method
func (m *MockInterviewRepository) GetConversations(arg0 uint64) (baseModels.Conversations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversations", arg0)
	ret0, _ := ret[0].(baseModels.Conversations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversations indicates an expected call of GetConversations
func (mr *MockInterviewRepositoryMockRecorder) GetConversations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversations", reflect.TypeOf((*MockInterviewRepository)(nil).GetConversations), arg0)
}

// GetHistory mocks base method
func (m *MockInterviewRepository) GetHistory(arg0 *baseModels.ChatParameters) (baseModels.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", arg0)
	ret0, _ := ret[0].(baseModels.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory
func (mr *MockInterviewRepositoryMockRecorder) GetHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockInterviewRepository)(nil).GetHistory), arg0)
}

// GetResponseCredentials mocks base method
func (m *MockInterviewRepository) GetResponseCredentials(arg0, arg1 uint64) (*baseModels.SummaryCredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseCredentials", arg0, arg1)
	ret0, _ := ret[0].(*baseModels.SummaryCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponseCredentials indicates an expected call of GetResponseCredentials
func (mr *MockInterviewRepositoryMockRecorder) GetResponseCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseCredentials", reflect.TypeOf((*MockInterviewRepository)(nil).GetResponseCredentials), arg0, arg1)
}

// IsOrganizationVacancy mocks base method
func (m *MockInterviewRepository) IsOrganizationVacancy(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOrganizationVacancy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsOrganizationVacancy indicates an expected call of IsOrganizationVacancy
func (mr *MockInterviewRepositoryMockRecorder) IsOrganizationVacancy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOrganizationVacancy", reflect.TypeOf((*MockInterviewRepository)(nil).IsOrganizationVacancy), arg0, arg1)
}

// ResponseSummary mocks base method
func (m *MockInterviewRepository) ResponseSummary(arg0 *baseModels.SendSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseSummary", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResponseSummary indicates an expected call of ResponseSummary
func (mr *MockInterviewRepositoryMockRecorder) ResponseSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseSummary", reflect.TypeOf((*MockInterviewRepository)(nil).ResponseSummary), arg0)
}

// SaveMessage mocks base method
func (m *MockInterviewRepository) SaveMessage(arg0 *chat.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMessage indicates an expected call of SaveMessage
func (mr *MockInterviewRepositoryMockRecorder) SaveMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockInterviewRepository)(nil).SaveMessage), arg0)
}
